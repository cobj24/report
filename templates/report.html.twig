{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>

    <nav class="report-nav">
        <a href="#kmom01">kmom01</a>
        <a href="#kmom02">kmom02</a>
        <a href="#kmom03">kmom03</a>
        <a href="#kmom04">kmom04</a>
        <a href="#kmom05">kmom05</a>
        <a href="#kmom06">kmom06</a>
        <a href="#kmom07/10">kmom07/10</a>
    </nav>

    <section id="kmom01">
        <h2>kmom01</h2>
        <p>
            I detta kursmoment bekantade vi oss med grunderna för objektorienterad PHP med hjälp av designmönstret MVC. Jag har begränsad erfarenhet av objektorientering, i en tidigare python-kurs har jag använt mig av objektorientering.
            Utöver detta har jag inte arbetat med objektorienterad programmering tidigare. PHP är ett objektorienterat språk, vilket betyder att du kan använda klasser och objekt för att strukturera koden på ett mer organiserat och återanvändbart sätt.
            En klass är som en mall eller ritning för ett objekt, och ett objekt är en instans av den klassen. För att skapa en klass behöver man initiera denna med nyckelordet "class", därefter kan man instansiera klassen med ett objekt.
            Uppgiften me/report gick bra, det var till en början svårt att få alla delar på plats (särskilt med symfony), men när grunden väl fanns på plats var resterade delar i uppgiften inte så svår att få till. Mycket av det som hanterades i uppgiften var bekant sedan tidigare kurser, med några modifieringar i hur koden skrivs.
            Från artikeln "PHP the right way" tycker jag det mest intressanta var delen om meta-programmering ("Reflection API" och "Magic Methods"), dessa delar vill jag gärna utforska mer. Även delen om "Compiled Templates" var av intresse då vi använder oss till stor del av twig.
            Min TIL för detta kmom är hur man använder routes för att visa olika webbplatser och att dessa är kopplade till egen twig fil där html-koden finns.
        </p>
    </section>

    <section id="kmom02">
        <h2>kmom02</h2>
        <p>
            I kursmoment 2 började vi bygga ett kortspel i PHP och Symfony. Arv innebär att en klass kan ärva egenskaper och metoder från en annan klass. I min kod används det t.ex. genom att CardGraphic ärver från Card och därmed får alla basklassens egenskaper (såsom färg och värde) men kan lägga till grafisk presentation med t.ex. UTF-8-symboler.
            Komposition är när ett objekt innehåller andra objekt. Det används i mitt fall i DeckOfCards och CardHand, där båda innehåller en array av Card-objekt.
            Ett interface definierar vilka metoder en klass måste implementera, men innehåller ingen logik. Traits är återanvändbara kodblock som kan användas i flera klasser. De kan vara praktiska för att dela gemensam logik utan att använda arv.
            Jag är nöjd med hur jag strukturerade mina klasser med tydliga ansvarsområden: Card, DeckOfCards, CardHand. Jag använde arv för att särskilja grafiska kort från logiska, och sessionen för att spara kortleken mellan requests.
            Jag tycker det har varit både roligt och utmanande att jobba med Symfony. MVC-strukturen gör det tydligt vad som ska ligga var, vilket hjälper mig hålla hyfsad ordning i projektet.
            Jag gillar hur kontroller och templates samspelar, och att routes är så enkla att definiera med attribut. Min TIL för detta kursmoment är hur man använder sessioner för att behålla tillstånd över olika requests.
        </p>
    </section>

    <section id="kmom03">
        <h2>kmom03</h2>
        <p>
            Kursmoment 3 hanterade kortspelet 21 och applikation med objektorienterade konstruktioner enligt MVC. Att modellera kortspelet med flödesdiagram och pseudokod kändes som ett bra sätt att strukturera mina tankar. Det hjälpte mig att visualisera hur spelet borde fungera steg för steg, särskilt när det gällde spelets logik som "dra kort", "stanna" och "bankens tur".
            Flödesdiagrammet gav en tydlig överblick över spelets faser, medan pseudokoden hjälpte till att bryta ner uppgiften i mindre, hanterbara delar. Jag tycker definitivt att detta arbetssätt stödjer min problemlösning. Det gjorde att jag kunde fokusera på struktur först – innan jag fastnade i detaljer kring syntax eller kod.
            Jag återanvände tidigare skapade kortklasser (som Card, DeckOfCards, CardHand) och byggde vidare på dem genom att skapa spelets huvudklasser: Game21, Player, Bank. Jag är nöjd med hur spelet fungerar och att jag lyckades följa instruktionerna stegvis: från landningssida, via spelmotor, till API. Det visuella blev också bättre efter att jag stylade korten med CSS.
            De förbättringsområden som jag skulle vilja jobba vidare med är att göra banken mer intelligent och som tar hjälp av statistiken. Jag skulle även vilja göra spelets logik ännu mer modulär med ett GameState-objekt. Att koda i Symfony har till en början varit lite utmanande eftersom det finns många koncept att hålla koll på – routing, controllers, templates osv.
            Jag känner mig tryggare nu med hur man strukturerar applikationen i Symfony, och jag uppskattar separationen mellan logik och presentation. Mitt TIL för detta kmom är hur viktigt det är att planera innan man kodar – flödesdiagram och pseudokod hjälpte visualisera och strukturera planeringen. Jag lärde mig också återanvända klasser och hur man skapar både HTML-sidor och API-endpoints inom samma ramverk.
        </p>
    </section>

    <section id="kmom04">
        <h2>kmom04</h2>
        <p>
            I kursmoment 4 jobbade vi med att skapa dokumentation och tester för vårat kortspel. Till en början var det lite klurigt att skriva testkod istället för kod för funktionalitet. När jag väl vande mig vid att använda PHPUnit så blev det ganska smidigt att jobba med. Jag gillar hur tydlig återkoppling man får när ett test misslyckas – det gör det lättare att felsöka.
            Jag lyckades nå över 90% kodtäckning för några av mina modellklasser. Samtliga i min /Card uppnådde 100%, det var däremot varierande resultat i mina /Dice och /Game mappar.
            De flesta av mina modellklasser var ganska testbara eftersom de har tydliga metoder och inte är beroende av yttre miljöer. Men vissa delar var svårare att testa eftersom de blandar logik med beroenden. För att förbättra testbarheten hade jag kunnat bryta ut logik till separata tjänster eller hjälpaklasser.
            Ja, jag gjorde om några av mina klasser utifrån testerna, specifikt hur ess beräknades både i Bank och Player, detta gjorde testerna mer funktionella. Ja, jag tycker att testbar kod ofta går hand i hand med ren kod. Om en metod är för lång eller gör för mycket blir den både svårare att förstå och att testa.
            Mitt TIL för detta kursmoment är hur viktigt det är att ha filerna på rätt ställe. Jag hade till en början inte lagt till mina modellklasser i Symfony-mappen, så PHPDoc genererades inte. Jag lärde mig också hur värdefullt det är att skriva tester samtidigt som man utvecklar – inte bara efteråt.
        </p>
    </section>

    <section id="kmom05">
        <h2>kmom05</h2>
        <p>
            Kursmoment 5 fokuserade på koppling till databas och göra GET/POST formulär. Vi skapade ett bibliotek med böcker som sammankopplas mellan databas och webbsida.
            Det gick överlag bra att jobba med Symfony och Doctrine i detta kursmoment. Det var lite klurigt till en början att förstå hur delarna hänger ihop, särskilt kopplingen mellan routes, controllers och templates, men ju mer jag jobbar med det desto mer självsäker känner jag mig. Jag märker att det är ganska mycket som händer bakom kulisserna, som jag tidigare inte reflekterat över.
            Applikationen jag byggde är ett enkelt bibliotekssystem där man kan lägga till, visa, redigera och ta bort böcker. Jag valde att följa MVC-strukturen och lade fokus på att återanvända komponenter på ett tydligt sätt. Jag försökte hålla gränssnittet så enkelt som möjligt men ändå tydligt – till exempel att göra alla knappar konsekventa i design och lägga till bekräftelse vid borttagning.
            Det gick bra med ORM och CRUD. Doctrine förenklar mycket genom att man slipper skriva SQL direkt. Jag uppskattade att man kan jobba direkt med objekt, och att kopplingar mellan entiteter kan hanteras via annotationer. Samtidigt kändes det lite ovant att inte ha full kontroll över SQL-frågorna – jämfört med t.ex. PDO där man skriver allt själv.
            Min uppfattning är att ORM är väldigt smidigt i projekt där man jobbar objektorienterat och där relationsmodellen inte är alltför komplex. Det sparar tid och minskar mängden kod. Min TIL för detta kursmoment är framför allt hur man använder Doctrine för att skapa och hantera databastabeller direkt från sina PHP-klasser.
            Jag lärde mig också mer om hur JSON-endpoints kan implementeras parallellt med vanliga HTML-vyer, vilket gör det enkelt att komplettera en applikation med ett API.
        </p>
    </section>

        <section id="kmom06">
        <h2>kmom06</h2>
        <p>
            I kursmoment 6 arbetade vi vidare med vår hemsida och fokuserade på automatiserade tester, främst med phpmetrics och Scrutinizer.
            Jag tyckte PHPMetrics var ett pedagogiskt verktyg som gav en bra översikt över koden. Det jag särskilt uppskattade var de visuella graferna. Den sammanfattande rapporten gjorde det enkelt att få en överskådlig bild av kodens tillstånd. Jag gillade också att man kunde klicka sig ner i detaljer för varje klass och metod.
            Scrutinizer var lite svårare att få igång än väntat, främst eftersom miljön där testerna körs skiljer sig en del från min lokala. Det uppstod fel relaterade till saknade frontend-filer som entrypoints.json, men det gick att lösa med ett kommando som skapade en tom fil. Jag fick tillslut resultatet som syns i min rapport, min build verkar dock ha strulat till det efter att jag gjort mina förbättringar, då den numera har "failed".
            Efter det kördes testerna, men jag behövde även anpassa .scrutinizer.yml något. Första intrycket av Scrutinizer är att det är ett kraftfullt verktyg för kodanalys, men det kräver lite pill för att allt ska fungera i miljön. Badgesen är en enkel men tydlig indikator som visar status för både kodtäckning och kvalitet direkt i GitHub-repot. Om jag hade haft mer tid så hade jag gärna fortsatt tragla på med Scrutinizer, men jag prioriterar i detta läge att få in uppgiften.
            För mig handlar kodkvalitet mycket om läsbarhet, enkelhet och testbarhet. Ren kod med tydlig struktur gör det enklare att underhålla, vidareutveckla och felsöka. Jag tror verktyg som Scrutinizer och PHPMetrics kan hjälpa till att lyfta fram problemområden, men de visar bara en del av helheten.
            TIL för detta kmom är hur mycket CI-verktyg som Scrutinizer och analysverktyg som PHPMetrics kan avslöja om kodens struktur och svagheter. Jag lärde mig också att det är viktigt att förstå hur verktygen fungerar i olika miljöer och att även små detaljer (som en saknad JSON-fil) kan orsaka stora problem.
        </p>
    </section>

        <section id="kmom07/10">
        <h2>kmom07/10</h2>
        <p>
            I det avslutande momentet för kursen MVC valde jag att implementera spelet/patiensen Poker Square. Jag valde spelet eftersom vi tidigare jobbat med kortspel och jag ville fortsätta utveckla fler spel och verkligen fokusera på den röda tråden genom kursen. Jag valde att jobba med grundkraven 1-3. Till en början försökte jag förstå hur spelet går till och vilka viktiga funktioner som behövde finnas på plats, så som en spelplan med kort i ett rutnät 5x5, kort som slumpas fram en efter en, när 50 kort slumpats fram och placerats på spelplanen ska spelet avslutas.
            Jag kunde återanvända viss kod från tidigare kursmoment, vilket underlättade framställandet av korten. Jag valde att använda en ny css-fil specifikt för projektet, som har ett helt annat utseende jämfört med tidigare kursmoment. Jag valde även att styla korten annorlunda, med ”riktiga” spelkort. För att utveckla spelet vidare, valde jag att lägga till en ”highscore”, så efter varje spelad runda kan man lägga till sitt namn. Namnet och poängen sparas och visas i en separat vy, som även kan nås via navbaren.
            Utöver detta lade jag till poängräkning vid sidan av spelplanen, tillsammans med antal drag kvar, och tips för bästa möjliga kortplacering. Detta tips använde sig av funktionen getSuggestedMove, som placerar kortet där den ger högsta möjliga poäng. Jag skapade nya undermappar i ”templates” och ”src” som specifikt avhandlar projektet, så att det fanns en tydlig skiljevägg mellan mina tidigare kursmoment och projektet. I min ”proj/about” beskriver jag kort projektet och kortspelet.
            Jag uppdaterade min scrutinizer med relevanta badges, min README.md samt dokumentation. I det stora hela gick projektet bra och kändes enkelt att utföra. Jag fokuserade min tid på att få grundkraven stabila och lade därefter till ett par extra funktioner för spelet. Även stylingen var till en början mycket enkel, och utvecklades allt eftersom projektet färdigställdes. Jag tycker att spelet inte hade en särskilt svår logik, men som förbättringspotential hade man kunna lagt till mer intelligens för att få datorn att spela själv.
            Det jag tyckte var svårast var att få till scrutinizer rapporterna och badges, detta tog många timmar då rapporten antingen misslyckades helt eller missade vissa komponenter. Kursen har gett mig en tydligare bild av objektorientering och PHP. Jag tycker att enhetstestning är ett viktigt område som jag är glad får ett eget kursmoment. Upplägget generellt sett har varit bra, och liknar till stor del de andra kurserna i programmet. Det är roligt att det finns flera vägar att gå för projektet, och att man själv får välja vart man vill lägga sin tid och energi.
            Jag kan varmt rekommendera kursen till min omgivning, då den lagt en bra grund men även utvecklat mina tidigare kunskaper. Jag ger kursen 9 av 10 poäng. 
        </p>
    </section>
{% endblock %}
