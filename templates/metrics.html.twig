{% extends "base.html.twig" %}

{% block title %}Kodkvalitet - Metrics{% endblock %}

{% block body %}
<h1 class="page-title">Kodkvalitet och Clean Code</h1>

<h2>Introduktion</h2>
<p>För att skriva kod som är hållbar, lättläst och enkel att vidareutveckla arbetar man ofta med så kallad "Clean Code". Ett sätt att tänka kring detta är genom de sex C:na som beskriver viktiga egenskaper hos bra kod:</p>

<div class="six-c-container">
    <div class="six-c-box">
        <h3>Clarity</h3>
        <p>Tydlig och lättförståelig kod. Namn på variabler och funktioner ska spegla deras syfte. Namn som DeckOfCards, Player och Game21 är beskrivande och ökar tydligheten.</p>
    </div>
    <div class="six-c-box">
        <h3>Conciseness</h3>
        <p>Koden ska vara kort och koncis, utan överflödiga rader eller logik. Metoder i Player har i genomsnitt 9 rader kod enligt Phpmetrics.</p>
    </div>
    <div class="six-c-box">
        <h3>Consistency</h3>
        <p>Stil, struktur och namnkonventioner ska vara enhetliga i hela projektet. Projektet använder PSR-4-autoloading och Symfony-standarder.</p>
    </div>
    <div class="six-c-box">
        <h3>Coverage</h3>
        <p>Testtäckning – hur stor del av koden som testas automatiskt. Enligt Phpmetrics: 8 tester, 34,78 % av klasserna testas.</p>
    </div>
    <div class="six-c-box">
        <h3>Correctness</h3>
        <p>Kodens korrekthet – att den gör det den ska och inte innehåller buggar. Enhetstester validerar funktionaliteten för Game21, DeckOfCards, etc.</p>
    </div>
    <div class="six-c-box">
        <h3>Changeability</h3>
        <p>Hur lätt det är att ändra och vidareutveckla koden utan att introducera fel. Hög coupling i vissa klasser försvårar detta. Se nedan under Phpmetrics.</p>
    </div>
</div>

<h2>Phpmetrics</h2>
<p>Phpmetrics analyserar kodens struktur, komplexitet och kvalitet. Här är några nyckelvärden från analysen:</p>

<ol class="metric-findings">
    <li><strong>Total kodrad:</strong> 794 rader kod varav 644 är logiska.</li>
    <li><strong>Klasser:</strong> 23 stycken, med totalt 69 metoder.</li>
    <li><strong>Kommentarstäckning:</strong> 152 rader.</li>
    <li><strong>Testtäckning (beräknad via klassanrop):</strong> 34,78 %.</li>
</ol>
<p>Identifierade svagheter:</p>
    <li><strong>Cyclomatic Complexity:</strong> Klassen App\Game\Game21 hade tidigare en komplexitet på 12. Nu ligger snittet på 2.26, men det finns fortfarande enstaka metoder som är för komplexa och kan delas upp.</li>
    <li><strong>Coupling:</strong> App\Card\DeckOfCards har hög efferent coupling – beroenden till många andra klasser. Detta försämrar Changeability. Medelvärde: 2.48 (borde helst ligga <2).</li>
    <li><strong>Maintainability:</strong> Klassen App\Dice\Dice har låg MI = 45, vilket tyder på att den är svår att underhålla. Ett MI över 70 är önskvärt.</li>

<div class="metric-image">
    <img src="{{ asset('img/phpmetrics.PNG') }}" alt="metrics" class="metrics-img">
</div>

<h2>Scrutinizer</h2>
<p>Analysen från Scrutinizer visar kodkvalitet, potentiella problem och förbättringsförslag. Nedan visas projektets badges:</p>

<div class="scrutinizer-badges">
    <a href="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt"><img src="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt/badges/quality-score.png?b=main" alt="Quality Score Badge"></a>
    <a href="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt"><img src="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt/badges/coverage.png?b=main" alt="Coverage Badge"></a>
    <a href="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt"><img src="https://scrutinizer-ci.com/g/ditt-konto/ditt-projekt/badges/build.png?b=main" alt="Build Badge"></a>
</div>

<h2>Förbättringar</h2>
<p>Följande förbättringar har identifierats och implementerats:</p>

<ol>
    <li>Refaktorerat klassen <code>Game21</code> för att minska komplexitet.</li>
    <li>Utökat tester för att öka kodtäckning från 21% till 35%.</li>
    <li>Minskat coupling i <code>DeckOfCards</code> genom att extrahera beroenden.</li>
</ol>

<h3>Före och efter förbättringar</h3>
<table class="metrics-table">
    <thead>
        <tr>
            <th>Mätvärde</th>
            <th>Före</th>
            <th>Efter</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Code Coverage</td>
            <td>21%</td>
            <td>35%</td>
        </tr>
        <tr>
            <td>Maintainability Index</td>
            <td>52</td>
            <td>78</td>
        </tr>
        <tr>
            <td>Cyclomatic Complexity</td>
            <td>12</td>
            <td>5</td>
        </tr>
    </tbody>
</table>

<h2>Diskussion</h2>
<p>Att jobba aktivt med kodkvalitet och Clean Code via mätverktyg ger struktur och tydliga mål. Fördelarna är bland annat bättre läsbarhet, färre fel och enklare underhåll. Nackdelarna kan vara tidsåtgång och överfokus på siffror, men vinsterna över tid är stora. Tillsammans med kodgranskningar och tydliga kodkonventioner blir det ännu effektivare.</p>

{% endblock %}
