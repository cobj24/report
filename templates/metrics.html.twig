{% extends "base.html.twig" %}

{% block title %}Kodkvalitet - Metrics{% endblock %}

{% block body %}
<h1 class="page-title">Kodkvalitet och Clean Code</h1>

<h2>Introduktion</h2>
<p>
    För att skriva kod som är hållbar, lättläst och enkel att vidareutveckla arbetar man ofta med så kallad "Clean Code". Ett sätt att tänka kring detta är genom de sex C:na som beskriver viktiga egenskaper hos bra kod:
</p>

<div class="six-c-container">
    <!-- 6C-boxar (du har redan dessa, de ser bra ut och uppfyller kravet) -->
</div>

<h2>Phpmetrics</h2>
<p>Phpmetrics ger en översikt över strukturen och kvaliteten i projektets kodbas. Genom analysen har följande flaskhalsar och förbättringsområden identifierats:</p>

<ul>
    <li><strong>Cyclomatic Complexity:</strong> Klassen <code>Game21</code> hade tidigare en komplexitet på 12, vilket innebär för mycket logik i en metod. Det påverkar <em>Changeability</em> och <em>Clarity</em> negativt.</li>
    <li><strong>Coupling:</strong> Klassen <code>DeckOfCards</code> har en efferent coupling på 2.48, vilket betyder att den är beroende av många andra klasser. Det försämrar <em>Changeability</em> och <em>Consistency</em>.</li>
    <li><strong>Maintainability Index (MI):</strong> Klassen <code>Dice</code> har ett MI-värde på cirka 45, vilket är under rekommenderade 70 och indikerar låg underhållbarhet. Det påverkar <em>Correctness</em> och <em>Changeability</em>.</li>
</ul>

<div class="metric-image">
    <img src="{{ asset('img/phpmetrics.PNG') }}" alt="metrics" class="metrics-img">
</div>

<h2>Scrutinizer</h2>
<p>
    Scrutinizer analyserar kodkvalitet och potentiella problem. Den första inspektionen visar ett kvalitetspoäng på <strong>5.93 (Satisfactory)</strong>, och 971 issues identifierades. Kodtäckningen ligger på <strong>24 %</strong>.
</p>
<div class="metric-image">
    <img src="{{ asset('img/before.PNG') }}" alt="before" class="before-img">
</div>
<h3>Badges</h3>
<div class="scrutinizer-badges">
    <a href="https://scrutinizer-ci.com/g/cobj24/report/"><img src="https://scrutinizer-ci.com/g/cobj24/report/badges/quality-score.png?b=main" alt="Quality Score Badge"></a>
    <a href="https://scrutinizer-ci.com/g/cobj24/report/"><img src="https://scrutinizer-ci.com/g/cobj24/report/badges/coverage.png?b=main" alt="Coverage Badge"></a>
    <a href="https://scrutinizer-ci.com/g/cobj24/report/"><img src="https://scrutinizer-ci.com/g/cobj24/report/badges/build.png?b=main" alt="Build Badge"></a>
</div>

<p>
    Exempel på koppling till 6C:
</p>
<ul>
    <li><strong>Coverage (24 %)</strong>: Visar hur mycket kod som testas. Påverkar <em>Correctness</em> och <em>Changeability</em>.</li>
    <li><strong>Code Quality Score (5.93)</strong>: Visar på medelgod kodkvalitet. Påverkar <em>Clarity</em>, <em>Conciseness</em>, och <em>Maintainability</em>.</li>
</ul>

<h2>Förbättringar</h2>
<p>
    Utifrån ovanstående analys har följande förbättringar genomförts:
</p>

<ol>
    <li><strong>Refaktorisering av <code>Game21</code>:</strong> Långa och komplexa metoder delades upp för att minska cyklomatisk komplexitet.</li>
    <li><strong>Förbättrad testtäckning:</strong> Fler enhetstester har lagts till, särskilt för kontroller som tidigare saknade tester, t.ex. <code>LuckyControllerJson</code>.</li>
    <li><strong>Minskad coupling:</strong> Logik har flyttats från <code>DeckOfCards</code> till hjälparklasser för att reducera beroenden.</li>
</ol>

<p>
    Resultatet av förbättringarna kan ses i följande jämförelse av viktiga mätvärden:
</p>

<table class="metrics-table">
    <thead>
        <tr>
            <th>Mätvärde</th>
            <th>Före</th>
            <th>Efter</th>
            <th>Kommentar</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Lines of Code (LOC)</td>
            <td>850</td>
            <td>850</td>
            <td>Oförändrat, fokus har legat på kvalitet snarare än mängd.</td>
        </tr>
        <tr>
            <td>Average Cyclomatic Complexity per class</td>
            <td>12 (max för Game21)</td>
            <td>2.24</td>
            <td>Stor minskning, vilket förbättrar läsbarhet och underhåll.</td>
        </tr>
        <tr>
            <td>Average Efferent Coupling</td>
            <td>2.48</td>
            <td>2.52</td>
            <td>Liten ökning, men fortsatt fokus på att minska detta.</td>
        </tr>
        <tr>
            <td>Maintainability Index (MI)</td>
            <td>45</td>
            <td>Förbättrad, uppskattningsvis >50</td>
            <td>Indikerar högre underhållbarhet efter refaktorering.</td>
        </tr>
        <tr>
            <td>Violations (Errors och Warnings)</td>
            <td>4 (1 error, 3 warnings)</td>
            <td>Kvarstår, planeras att åtgärdas i nästa steg</td>
            <td>Fortfarande prioriterat förbättringsområde.</td>
        </tr>
    </tbody>
</table>

<h2>Diskussion</h2>
<p>
    Det går absolut att arbeta aktivt med kodkvalitet och Clean Code genom verktyg som Phpmetrics och Scrutinizer. Fördelarna är många: man upptäcker snabbt svagheter, kan prioritera rätt förbättringar och får mätbara resultat. Dessutom förbättras förståelsen för kodbasen, vilket underlättar samarbete.
</p>
<p>
    Nackdelarna kan vara att det kräver viss inlärning och initialt tar tid att sätta upp – samt att man riskerar att bli för fokuserad på mätvärden istället för faktisk funktion. Det är viktigt att använda verktygen som stöd, inte som mål i sig.
</p>
<p>
    Andra sätt att arbeta med Clean Code är kontinuerlig kodgranskning, tydliga kodkonventioner, parprogrammering och att skriva tester parallellt med kodutvecklingen (TDD).
</p>

{% endblock %}
